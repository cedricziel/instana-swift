//
// InfrastructureCatalogAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class InfrastructureCatalogAPI {
    /**
     Get metric catalog
     
     - parameter plugin: (path)  
     - parameter filter: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInfrastructureCatalogMetrics(plugin: String, filter: String? = nil, apiResponseQueue: DispatchQueue = InstanaClientAPI.apiResponseQueue, completion: @escaping ((_ data: [MetricInstance]?,_ error: Error?) -> Void)) {
        getInfrastructureCatalogMetricsWithRequestBuilder(plugin: plugin, filter: filter).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get metric catalog
     - GET /api/infrastructure-monitoring/catalog/metrics/{plugin}
     - This endpoint retrieves all available metric definitions of the requested plugin.  ### Path Parameters:  **plugin** The plugin id from [available plugins](#operation/getInfrastructureCatalogPlugins)  ### Optional Parameters:  **filter** You can restrict the returned metric definitions by passing a filter.  * `custom` to retrieve custom metric definitions only. * `builtin` to retrieve built-in metric definitions only. 
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter plugin: (path)  
     - parameter filter: (query)  (optional)
     - returns: RequestBuilder<[MetricInstance]> 
     */
    open class func getInfrastructureCatalogMetricsWithRequestBuilder(plugin: String, filter: String? = nil) -> RequestBuilder<[MetricInstance]> {
        var path = "/api/infrastructure-monitoring/catalog/metrics/{plugin}"
        let pluginPreEscape = "\(APIHelper.mapValueToPathItem(plugin))"
        let pluginPostEscape = pluginPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{plugin}", with: pluginPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[MetricInstance]>.Type = InstanaClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get plugin catalog
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInfrastructureCatalogPlugins(apiResponseQueue: DispatchQueue = InstanaClientAPI.apiResponseQueue, completion: @escaping ((_ data: [PluginResult]?,_ error: Error?) -> Void)) {
        getInfrastructureCatalogPluginsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get plugin catalog
     - GET /api/infrastructure-monitoring/catalog/plugins
     - This endpoint retrieves all available plugin ids for your monitored system. 
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[PluginResult]> 
     */
    open class func getInfrastructureCatalogPluginsWithRequestBuilder() -> RequestBuilder<[PluginResult]> {
        let path = "/api/infrastructure-monitoring/catalog/plugins"
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[PluginResult]>.Type = InstanaClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     get search field catalog
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInfrastructureCatalogSearchFields(apiResponseQueue: DispatchQueue = InstanaClientAPI.apiResponseQueue, completion: @escaping ((_ data: [SearchFieldResult]?,_ error: Error?) -> Void)) {
        getInfrastructureCatalogSearchFieldsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     get search field catalog
     - GET /api/infrastructure-monitoring/catalog/search
     - This endpoint retrieves all available search keywords for dynamic focus queries.  These search fields can be accessed via lucene queries. Each field belongs to a context, e.g. to entity, trace or event data. Some fields contain a set of possible fixed values, in this case a deviant value is invalid.  ``` ?query={keyword}:{value} ``` 
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[SearchFieldResult]> 
     */
    open class func getInfrastructureCatalogSearchFieldsWithRequestBuilder() -> RequestBuilder<[SearchFieldResult]> {
        let path = "/api/infrastructure-monitoring/catalog/search"
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SearchFieldResult]>.Type = InstanaClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
