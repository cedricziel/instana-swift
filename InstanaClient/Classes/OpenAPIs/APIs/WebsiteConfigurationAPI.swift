//
// WebsiteConfigurationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class WebsiteConfigurationAPI {
    /**
     Get configured websites
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(completion: @escaping ((_ data: [Website]?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get configured websites
     - GET /api/website-monitoring/config
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[Website]> 
     */
    open class func callGetWithRequestBuilder() -> RequestBuilder<[Website]> {
        let path = "/api/website-monitoring/config"
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Website]>.Type = InstanaClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove website
     
     - parameter websiteId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete1(websiteId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        delete1WithRequestBuilder(websiteId: websiteId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Remove website
     - DELETE /api/website-monitoring/config/{websiteId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter websiteId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func delete1WithRequestBuilder(websiteId: String) -> RequestBuilder<Void> {
        var path = "/api/website-monitoring/config/{websiteId}"
        let websiteIdPreEscape = "\(APIHelper.mapValueToPathItem(websiteId))"
        let websiteIdPostEscape = websiteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{websiteId}", with: websiteIdPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Configure new website
     
     - parameter name: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func post(name: String? = nil, completion: @escaping ((_ data: Website?,_ error: Error?) -> Void)) {
        postWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Configure new website
     - POST /api/website-monitoring/config
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter name: (query)  (optional)
     - returns: RequestBuilder<Website> 
     */
    open class func postWithRequestBuilder(name: String? = nil) -> RequestBuilder<Website> {
        let path = "/api/website-monitoring/config"
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Website>.Type = InstanaClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Rename website
     
     - parameter websiteId: (path)  
     - parameter name: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rename(websiteId: String, name: String? = nil, completion: @escaping ((_ data: Website?,_ error: Error?) -> Void)) {
        renameWithRequestBuilder(websiteId: websiteId, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Rename website
     - PUT /api/website-monitoring/config/{websiteId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter websiteId: (path)  
     - parameter name: (query)  (optional)
     - returns: RequestBuilder<Website> 
     */
    open class func renameWithRequestBuilder(websiteId: String, name: String? = nil) -> RequestBuilder<Website> {
        var path = "/api/website-monitoring/config/{websiteId}"
        let websiteIdPreEscape = "\(APIHelper.mapValueToPathItem(websiteId))"
        let websiteIdPostEscape = websiteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{websiteId}", with: websiteIdPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Website>.Type = InstanaClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
