//
// APITokenAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class APITokenAPI {
    /**
     Delete API token
     
     - parameter apiTokenId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteApiToken(apiTokenId: String, apiResponseQueue: DispatchQueue = InstanaClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteApiTokenWithRequestBuilder(apiTokenId: apiTokenId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete API token
     - DELETE /api/settings/api-tokens/{apiTokenId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter apiTokenId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteApiTokenWithRequestBuilder(apiTokenId: String) -> RequestBuilder<Void> {
        var path = "/api/settings/api-tokens/{apiTokenId}"
        let apiTokenIdPreEscape = "\(APIHelper.mapValueToPathItem(apiTokenId))"
        let apiTokenIdPostEscape = apiTokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{apiTokenId}", with: apiTokenIdPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     API token
     
     - parameter apiTokenId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApiToken(apiTokenId: String, apiResponseQueue: DispatchQueue = InstanaClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiToken?,_ error: Error?) -> Void)) {
        getApiTokenWithRequestBuilder(apiTokenId: apiTokenId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     API token
     - GET /api/settings/api-tokens/{apiTokenId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter apiTokenId: (path)  
     - returns: RequestBuilder<ApiToken> 
     */
    open class func getApiTokenWithRequestBuilder(apiTokenId: String) -> RequestBuilder<ApiToken> {
        var path = "/api/settings/api-tokens/{apiTokenId}"
        let apiTokenIdPreEscape = "\(APIHelper.mapValueToPathItem(apiTokenId))"
        let apiTokenIdPostEscape = apiTokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{apiTokenId}", with: apiTokenIdPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiToken>.Type = InstanaClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All API tokes
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApiTokens(apiResponseQueue: DispatchQueue = InstanaClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ApiToken]?,_ error: Error?) -> Void)) {
        getApiTokensWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     All API tokes
     - GET /api/settings/api-tokens
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[ApiToken]> 
     */
    open class func getApiTokensWithRequestBuilder() -> RequestBuilder<[ApiToken]> {
        let path = "/api/settings/api-tokens"
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ApiToken]>.Type = InstanaClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create or update an API token
     
     - parameter apiTokenId: (path)  
     - parameter apiToken: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putApiToken(apiTokenId: String, apiToken: ApiToken, apiResponseQueue: DispatchQueue = InstanaClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiToken?,_ error: Error?) -> Void)) {
        putApiTokenWithRequestBuilder(apiTokenId: apiTokenId, apiToken: apiToken).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create or update an API token
     - PUT /api/settings/api-tokens/{apiTokenId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter apiTokenId: (path)  
     - parameter apiToken: (body)  
     - returns: RequestBuilder<ApiToken> 
     */
    open class func putApiTokenWithRequestBuilder(apiTokenId: String, apiToken: ApiToken) -> RequestBuilder<ApiToken> {
        var path = "/api/settings/api-tokens/{apiTokenId}"
        let apiTokenIdPreEscape = "\(APIHelper.mapValueToPathItem(apiTokenId))"
        let apiTokenIdPostEscape = apiTokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{apiTokenId}", with: apiTokenIdPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: apiToken)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiToken>.Type = InstanaClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
