//
// MaintenanceConfigurationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class MaintenanceConfigurationAPI {
    /**
     Delete maintenance configuration
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMaintenanceConfig(id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteMaintenanceConfigWithRequestBuilder(id: id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete maintenance configuration
     - DELETE /api/settings/maintenance/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMaintenanceConfigWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/settings/maintenance/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Maintenance configuration
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMaintenanceConfig(id: String, completion: @escaping ((_ data: MaintenanceConfigWithLastUpdated?,_ error: Error?) -> Void)) {
        getMaintenanceConfigWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Maintenance configuration
     - GET /api/settings/maintenance/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<MaintenanceConfigWithLastUpdated> 
     */
    open class func getMaintenanceConfigWithRequestBuilder(id: String) -> RequestBuilder<MaintenanceConfigWithLastUpdated> {
        var path = "/api/settings/maintenance/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MaintenanceConfigWithLastUpdated>.Type = InstanaClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All maintenance configurations
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMaintenanceConfigs(completion: @escaping ((_ data: [ValidatedMaintenanceConfigWithStatus]?,_ error: Error?) -> Void)) {
        getMaintenanceConfigsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All maintenance configurations
     - GET /api/settings/maintenance
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[ValidatedMaintenanceConfigWithStatus]> 
     */
    open class func getMaintenanceConfigsWithRequestBuilder() -> RequestBuilder<[ValidatedMaintenanceConfigWithStatus]> {
        let path = "/api/settings/maintenance"
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ValidatedMaintenanceConfigWithStatus]>.Type = InstanaClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create or update maintenance configuration
     
     - parameter id: (path)  
     - parameter maintenanceConfig: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putMaintenanceConfig(id: String, maintenanceConfig: MaintenanceConfig, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putMaintenanceConfigWithRequestBuilder(id: id, maintenanceConfig: maintenanceConfig).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Create or update maintenance configuration
     - PUT /api/settings/maintenance/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - parameter maintenanceConfig: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func putMaintenanceConfigWithRequestBuilder(id: String, maintenanceConfig: MaintenanceConfig) -> RequestBuilder<Void> {
        var path = "/api/settings/maintenance/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: maintenanceConfig)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
