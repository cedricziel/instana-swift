//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class DefaultAPI {
    /**

     - parameter websiteId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSourceMapConfig(websiteId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createSourceMapConfigWithRequestBuilder(websiteId: websiteId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/website-monitoring/config/{websiteId}/sourceMap
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter websiteId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func createSourceMapConfigWithRequestBuilder(websiteId: String) -> RequestBuilder<Void> {
        var path = "/api/website-monitoring/config/{websiteId}/sourceMap"
        let websiteIdPreEscape = "\(APIHelper.mapValueToPathItem(websiteId))"
        let websiteIdPostEscape = websiteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{websiteId}", with: websiteIdPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/events/settings/website-alert-configs/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/events/settings/website-alert-configs/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter websiteId: (path)  
     - parameter sourceMapConfigId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSourceMapConfig(websiteId: String, sourceMapConfigId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSourceMapConfigWithRequestBuilder(websiteId: websiteId, sourceMapConfigId: sourceMapConfigId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/website-monitoring/config/{websiteId}/sourceMap/{sourceMapConfigId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter websiteId: (path)  
     - parameter sourceMapConfigId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteSourceMapConfigWithRequestBuilder(websiteId: String, sourceMapConfigId: String) -> RequestBuilder<Void> {
        var path = "/api/website-monitoring/config/{websiteId}/sourceMap/{sourceMapConfigId}"
        let websiteIdPreEscape = "\(APIHelper.mapValueToPathItem(websiteId))"
        let websiteIdPostEscape = websiteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{websiteId}", with: websiteIdPostEscape, options: .literal, range: nil)
        let sourceMapConfigIdPreEscape = "\(APIHelper.mapValueToPathItem(sourceMapConfigId))"
        let sourceMapConfigIdPostEscape = sourceMapConfigIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sourceMapConfigId}", with: sourceMapConfigIdPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disable(id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        disableWithRequestBuilder(id: id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/events/settings/website-alert-configs/{id}/disable
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func disableWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/events/settings/website-alert-configs/{id}/disable"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enable(id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enableWithRequestBuilder(id: id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/events/settings/website-alert-configs/{id}/enable
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enableWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/events/settings/website-alert-configs/{id}/enable"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter websiteId: (path)  
     - parameter sourceMapConfigId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSourceMapConfig(websiteId: String, sourceMapConfigId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getSourceMapConfigWithRequestBuilder(websiteId: websiteId, sourceMapConfigId: sourceMapConfigId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/website-monitoring/config/{websiteId}/sourceMap/{sourceMapConfigId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter websiteId: (path)  
     - parameter sourceMapConfigId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getSourceMapConfigWithRequestBuilder(websiteId: String, sourceMapConfigId: String) -> RequestBuilder<Void> {
        var path = "/api/website-monitoring/config/{websiteId}/sourceMap/{sourceMapConfigId}"
        let websiteIdPreEscape = "\(APIHelper.mapValueToPathItem(websiteId))"
        let websiteIdPostEscape = websiteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{websiteId}", with: websiteIdPostEscape, options: .literal, range: nil)
        let sourceMapConfigIdPreEscape = "\(APIHelper.mapValueToPathItem(sourceMapConfigId))"
        let sourceMapConfigIdPostEscape = sourceMapConfigIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sourceMapConfigId}", with: sourceMapConfigIdPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter websiteId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSourceMapConfigs(websiteId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getSourceMapConfigsWithRequestBuilder(websiteId: websiteId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/website-monitoring/config/{websiteId}/sourceMap
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter websiteId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getSourceMapConfigsWithRequestBuilder(websiteId: String) -> RequestBuilder<Void> {
        var path = "/api/website-monitoring/config/{websiteId}/sourceMap"
        let websiteIdPreEscape = "\(APIHelper.mapValueToPathItem(websiteId))"
        let websiteIdPostEscape = websiteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{websiteId}", with: websiteIdPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter websiteId: (path)  
     - parameter sourceMapConfigId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSourceMapConfig(websiteId: String, sourceMapConfigId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateSourceMapConfigWithRequestBuilder(websiteId: websiteId, sourceMapConfigId: sourceMapConfigId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/website-monitoring/config/{websiteId}/sourceMap/{sourceMapConfigId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter websiteId: (path)  
     - parameter sourceMapConfigId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateSourceMapConfigWithRequestBuilder(websiteId: String, sourceMapConfigId: String) -> RequestBuilder<Void> {
        var path = "/api/website-monitoring/config/{websiteId}/sourceMap/{sourceMapConfigId}"
        let websiteIdPreEscape = "\(APIHelper.mapValueToPathItem(websiteId))"
        let websiteIdPostEscape = websiteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{websiteId}", with: websiteIdPostEscape, options: .literal, range: nil)
        let sourceMapConfigIdPreEscape = "\(APIHelper.mapValueToPathItem(sourceMapConfigId))"
        let sourceMapConfigIdPostEscape = sourceMapConfigIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sourceMapConfigId}", with: sourceMapConfigIdPostEscape, options: .literal, range: nil)
        let URLString = InstanaClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = InstanaClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
