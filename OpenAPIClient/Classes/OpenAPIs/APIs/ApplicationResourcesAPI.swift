//
// ApplicationResourcesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ApplicationResourcesAPI {
    /**
     Get endpoints
     
     - parameter nameFilter: (query)  (optional)
     - parameter types: (query)  (optional)
     - parameter technologies: (query)  (optional)
     - parameter windowSize: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationResourcesEndpoints(nameFilter: String? = nil, types: [String]? = nil, technologies: [String]? = nil, windowSize: Int64? = nil, to: Int64? = nil, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: EndpointResult?,_ error: Error?) -> Void)) {
        applicationResourcesEndpointsWithRequestBuilder(nameFilter: nameFilter, types: types, technologies: technologies, windowSize: windowSize, to: to, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get endpoints
     - GET /api/application-monitoring/applications/services/endpoints
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter nameFilter: (query)  (optional)
     - parameter types: (query)  (optional)
     - parameter technologies: (query)  (optional)
     - parameter windowSize: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - returns: RequestBuilder<EndpointResult> 
     */
    open class func applicationResourcesEndpointsWithRequestBuilder(nameFilter: String? = nil, types: [String]? = nil, technologies: [String]? = nil, windowSize: Int64? = nil, to: Int64? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<EndpointResult> {
        let path = "/api/application-monitoring/applications/services/endpoints"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "nameFilter": nameFilter?.encodeToJSON(), 
            "types": types?.encodeToJSON(), 
            "technologies": technologies?.encodeToJSON(), 
            "windowSize": windowSize?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<EndpointResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get applications/services
     
     - parameter nameFilter: (query)  (optional)
     - parameter windowSize: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApplicationServices(nameFilter: String? = nil, windowSize: Int64? = nil, to: Int64? = nil, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ServiceResult?,_ error: Error?) -> Void)) {
        getApplicationServicesWithRequestBuilder(nameFilter: nameFilter, windowSize: windowSize, to: to, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get applications/services
     - GET /api/application-monitoring/applications/services
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter nameFilter: (query)  (optional)
     - parameter windowSize: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - returns: RequestBuilder<ServiceResult> 
     */
    open class func getApplicationServicesWithRequestBuilder(nameFilter: String? = nil, windowSize: Int64? = nil, to: Int64? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ServiceResult> {
        let path = "/api/application-monitoring/applications/services"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "nameFilter": nameFilter?.encodeToJSON(), 
            "windowSize": windowSize?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ServiceResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get applications
     
     - parameter nameFilter: (query)  (optional)
     - parameter windowSize: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApplications(nameFilter: String? = nil, windowSize: Int64? = nil, to: Int64? = nil, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ApplicationResult?,_ error: Error?) -> Void)) {
        getApplicationsWithRequestBuilder(nameFilter: nameFilter, windowSize: windowSize, to: to, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get applications
     - GET /api/application-monitoring/applications
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter nameFilter: (query)  (optional)
     - parameter windowSize: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - returns: RequestBuilder<ApplicationResult> 
     */
    open class func getApplicationsWithRequestBuilder(nameFilter: String? = nil, windowSize: Int64? = nil, to: Int64? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ApplicationResult> {
        let path = "/api/application-monitoring/applications"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "nameFilter": nameFilter?.encodeToJSON(), 
            "windowSize": windowSize?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ApplicationResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get services
     
     - parameter nameFilter: (query)  (optional)
     - parameter windowSize: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getServices(nameFilter: String? = nil, windowSize: Int64? = nil, to: Int64? = nil, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ServiceResult?,_ error: Error?) -> Void)) {
        getServicesWithRequestBuilder(nameFilter: nameFilter, windowSize: windowSize, to: to, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get services
     - GET /api/application-monitoring/services
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter nameFilter: (query)  (optional)
     - parameter windowSize: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - returns: RequestBuilder<ServiceResult> 
     */
    open class func getServicesWithRequestBuilder(nameFilter: String? = nil, windowSize: Int64? = nil, to: Int64? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ServiceResult> {
        let path = "/api/application-monitoring/services"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "nameFilter": nameFilter?.encodeToJSON(), 
            "windowSize": windowSize?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ServiceResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
