//
// ReleasesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ReleasesAPI {
    /**
     Delete release
     
     - parameter releaseId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRelease(releaseId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteReleaseWithRequestBuilder(releaseId: releaseId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete release
     - DELETE /api/releases/{releaseId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter releaseId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteReleaseWithRequestBuilder(releaseId: String) -> RequestBuilder<Void> {
        var path = "/api/releases/{releaseId}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{releaseId}", with: releaseIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all releases
     
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter maxResults: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllReleases(from: Int64? = nil, to: Int64? = nil, maxResults: Int? = nil, completion: @escaping ((_ data: [ReleaseWithMetadata]?,_ error: Error?) -> Void)) {
        getAllReleasesWithRequestBuilder(from: from, to: to, maxResults: maxResults).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get all releases
     - GET /api/releases
     - This endpoint exposes the Releases functionality.  These APIs can be used to create, update, delete and fetch already existing releases.  ## Mandatory Parameters:  **releaseId:** A unique identifier assigned to each release.  ## Optional Parameters:  **name:** Name of the exact release you want to retrieve, eg. \"Release-161\", \"Release-162\".  **start:** Start time of the particular release.  **from:** Filters the releases to retrieve only the releases which have \"start\" time greater than or equal to this value.  **to:** Filters the releases to retrieve only the releases which have \"start\" time lesser than or equal to this value.  **maxResults:** Maximum number of releases to be retrieved.  ## Defaults:  **from, to, maxResults:** By default these parameters are not set.  
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter maxResults: (query)  (optional)
     - returns: RequestBuilder<[ReleaseWithMetadata]> 
     */
    open class func getAllReleasesWithRequestBuilder(from: Int64? = nil, to: Int64? = nil, maxResults: Int? = nil) -> RequestBuilder<[ReleaseWithMetadata]> {
        let path = "/api/releases"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "maxResults": maxResults?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ReleaseWithMetadata]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get release
     
     - parameter releaseId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRelease(releaseId: String, completion: @escaping ((_ data: ReleaseWithMetadata?,_ error: Error?) -> Void)) {
        getReleaseWithRequestBuilder(releaseId: releaseId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get release
     - GET /api/releases/{releaseId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter releaseId: (path)  
     - returns: RequestBuilder<ReleaseWithMetadata> 
     */
    open class func getReleaseWithRequestBuilder(releaseId: String) -> RequestBuilder<ReleaseWithMetadata> {
        var path = "/api/releases/{releaseId}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{releaseId}", with: releaseIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReleaseWithMetadata>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create release
     
     - parameter release: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRelease(release: Release, completion: @escaping ((_ data: ReleaseWithMetadata?,_ error: Error?) -> Void)) {
        postReleaseWithRequestBuilder(release: release).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Create release
     - POST /api/releases
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter release: (body)  
     - returns: RequestBuilder<ReleaseWithMetadata> 
     */
    open class func postReleaseWithRequestBuilder(release: Release) -> RequestBuilder<ReleaseWithMetadata> {
        let path = "/api/releases"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: release)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReleaseWithMetadata>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update release
     
     - parameter releaseId: (path)  
     - parameter release: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRelease(releaseId: String, release: Release, completion: @escaping ((_ data: ReleaseWithMetadata?,_ error: Error?) -> Void)) {
        putReleaseWithRequestBuilder(releaseId: releaseId, release: release).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update release
     - PUT /api/releases/{releaseId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter releaseId: (path)  
     - parameter release: (body)  
     - returns: RequestBuilder<ReleaseWithMetadata> 
     */
    open class func putReleaseWithRequestBuilder(releaseId: String, release: Release) -> RequestBuilder<ReleaseWithMetadata> {
        var path = "/api/releases/{releaseId}"
        let releaseIdPreEscape = "\(APIHelper.mapValueToPathItem(releaseId))"
        let releaseIdPostEscape = releaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{releaseId}", with: releaseIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: release)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReleaseWithMetadata>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
