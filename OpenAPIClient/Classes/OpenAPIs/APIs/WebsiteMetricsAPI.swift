//
// WebsiteMetricsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class WebsiteMetricsAPI {
    /**
     Get beacon metrics
     
     - parameter getWebsiteMetrics: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBeaconMetrics(getWebsiteMetrics: GetWebsiteMetrics? = nil, completion: @escaping ((_ data: WebsiteMetricResult?,_ error: Error?) -> Void)) {
        getBeaconMetricsWithRequestBuilder(getWebsiteMetrics: getWebsiteMetrics).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get beacon metrics
     - POST /api/website-monitoring/metrics
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter getWebsiteMetrics: (body)  (optional)
     - returns: RequestBuilder<WebsiteMetricResult> 
     */
    open class func getBeaconMetricsWithRequestBuilder(getWebsiteMetrics: GetWebsiteMetrics? = nil) -> RequestBuilder<WebsiteMetricResult> {
        let path = "/api/website-monitoring/metrics"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getWebsiteMetrics)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebsiteMetricResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get page load
     
     - parameter id: (path)  
     - parameter timestamp: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPageLoad(id: String, timestamp: Int64, completion: @escaping ((_ data: [WebsiteMonitoringBeacon]?,_ error: Error?) -> Void)) {
        getPageLoadWithRequestBuilder(id: id, timestamp: timestamp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get page load
     - GET /api/website-monitoring/page-load
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - parameter timestamp: (path)  
     - returns: RequestBuilder<[WebsiteMonitoringBeacon]> 
     */
    open class func getPageLoadWithRequestBuilder(id: String, timestamp: Int64) -> RequestBuilder<[WebsiteMonitoringBeacon]> {
        var path = "/api/website-monitoring/page-load"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let timestampPreEscape = "\(APIHelper.mapValueToPathItem(timestamp))"
        let timestampPostEscape = timestampPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{timestamp}", with: timestampPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WebsiteMonitoringBeacon]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
