//
// EventsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class EventsAPI {
    /**
     Get Event
     
     - parameter eventId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEvent(eventId: String, completion: @escaping ((_ data: EventResult?,_ error: Error?) -> Void)) {
        getEventWithRequestBuilder(eventId: eventId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Event
     - GET /api/events/{eventId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter eventId: (path)  
     - returns: RequestBuilder<EventResult> 
     */
    open class func getEventWithRequestBuilder(eventId: String) -> RequestBuilder<EventResult> {
        var path = "/api/events/{eventId}"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EventResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get alerts
     
     - parameter windowSize: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter excludeTriggeredBefore: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEvents(windowSize: Int64? = nil, from: Int64? = nil, to: Int64? = nil, excludeTriggeredBefore: Bool? = nil, completion: @escaping ((_ data: [EventResult]?,_ error: Error?) -> Void)) {
        getEventsWithRequestBuilder(windowSize: windowSize, from: from, to: to, excludeTriggeredBefore: excludeTriggeredBefore).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get alerts
     - GET /api/events
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter windowSize: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter excludeTriggeredBefore: (query)  (optional)
     - returns: RequestBuilder<[EventResult]> 
     */
    open class func getEventsWithRequestBuilder(windowSize: Int64? = nil, from: Int64? = nil, to: Int64? = nil, excludeTriggeredBefore: Bool? = nil) -> RequestBuilder<[EventResult]> {
        let path = "/api/events"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "windowSize": windowSize?.encodeToJSON(), 
            "from": from?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "excludeTriggeredBefore": excludeTriggeredBefore?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[EventResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
