//
// ApplicationSettingsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ApplicationSettingsAPI {
    /**
     Add application configuration
     
     - parameter applicationConfig: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addApplicationConfig(applicationConfig: ApplicationConfig, completion: @escaping ((_ data: ApplicationConfig?,_ error: Error?) -> Void)) {
        addApplicationConfigWithRequestBuilder(applicationConfig: applicationConfig).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Add application configuration
     - POST /api/application-monitoring/settings/application
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter applicationConfig: (body)  
     - returns: RequestBuilder<ApplicationConfig> 
     */
    open class func addApplicationConfigWithRequestBuilder(applicationConfig: ApplicationConfig) -> RequestBuilder<ApplicationConfig> {
        let path = "/api/application-monitoring/settings/application"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applicationConfig)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApplicationConfig>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add service configuration
     
     - parameter serviceConfig: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addServiceConfig(serviceConfig: ServiceConfig, completion: @escaping ((_ data: ServiceConfig?,_ error: Error?) -> Void)) {
        addServiceConfigWithRequestBuilder(serviceConfig: serviceConfig).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Add service configuration
     - POST /api/application-monitoring/settings/service
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter serviceConfig: (body)  
     - returns: RequestBuilder<ServiceConfig> 
     */
    open class func addServiceConfigWithRequestBuilder(serviceConfig: ServiceConfig) -> RequestBuilder<ServiceConfig> {
        let path = "/api/application-monitoring/settings/service"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceConfig)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceConfig>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create endpoint configuration
     
     - parameter httpEndpointConfig: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createEndpointConfig(httpEndpointConfig: HttpEndpointConfig, completion: @escaping ((_ data: HttpEndpointConfig?,_ error: Error?) -> Void)) {
        createEndpointConfigWithRequestBuilder(httpEndpointConfig: httpEndpointConfig).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Create endpoint configuration
     - POST /api/application-monitoring/settings/http-endpoint
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter httpEndpointConfig: (body)  
     - returns: RequestBuilder<HttpEndpointConfig> 
     */
    open class func createEndpointConfigWithRequestBuilder(httpEndpointConfig: HttpEndpointConfig) -> RequestBuilder<HttpEndpointConfig> {
        let path = "/api/application-monitoring/settings/http-endpoint"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: httpEndpointConfig)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HttpEndpointConfig>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete application configuration
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteApplicationConfig(id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteApplicationConfigWithRequestBuilder(id: id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete application configuration
     - DELETE /api/application-monitoring/settings/application/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteApplicationConfigWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/application-monitoring/settings/application/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete endpoint configuration
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteEndpointConfig(id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteEndpointConfigWithRequestBuilder(id: id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete endpoint configuration
     - DELETE /api/application-monitoring/settings/http-endpoint/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteEndpointConfigWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/application-monitoring/settings/http-endpoint/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete service configuration
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteServiceConfig(id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteServiceConfigWithRequestBuilder(id: id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete service configuration
     - DELETE /api/application-monitoring/settings/service/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteServiceConfigWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/application-monitoring/settings/service/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Application configuration
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApplicationConfig(id: String, completion: @escaping ((_ data: ApplicationConfig?,_ error: Error?) -> Void)) {
        getApplicationConfigWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Application configuration
     - GET /api/application-monitoring/settings/application/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<ApplicationConfig> 
     */
    open class func getApplicationConfigWithRequestBuilder(id: String) -> RequestBuilder<ApplicationConfig> {
        var path = "/api/application-monitoring/settings/application/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApplicationConfig>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All Application configurations
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApplicationConfigs(completion: @escaping ((_ data: [ApplicationConfig]?,_ error: Error?) -> Void)) {
        getApplicationConfigsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All Application configurations
     - GET /api/application-monitoring/settings/application
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[ApplicationConfig]> 
     */
    open class func getApplicationConfigsWithRequestBuilder() -> RequestBuilder<[ApplicationConfig]> {
        let path = "/api/application-monitoring/settings/application"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ApplicationConfig]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Endpoint configuration
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEndpointConfig(id: String, completion: @escaping ((_ data: HttpEndpointConfig?,_ error: Error?) -> Void)) {
        getEndpointConfigWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Endpoint configuration
     - GET /api/application-monitoring/settings/http-endpoint/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<HttpEndpointConfig> 
     */
    open class func getEndpointConfigWithRequestBuilder(id: String) -> RequestBuilder<HttpEndpointConfig> {
        var path = "/api/application-monitoring/settings/http-endpoint/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HttpEndpointConfig>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All Endpoint configurations
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEndpointConfigs(completion: @escaping ((_ data: [HttpEndpointConfig]?,_ error: Error?) -> Void)) {
        getEndpointConfigsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All Endpoint configurations
     - GET /api/application-monitoring/settings/http-endpoint
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[HttpEndpointConfig]> 
     */
    open class func getEndpointConfigsWithRequestBuilder() -> RequestBuilder<[HttpEndpointConfig]> {
        let path = "/api/application-monitoring/settings/http-endpoint"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[HttpEndpointConfig]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Service configuration
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getServiceConfig(id: String, completion: @escaping ((_ data: ServiceConfig?,_ error: Error?) -> Void)) {
        getServiceConfigWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Service configuration
     - GET /api/application-monitoring/settings/service/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<ServiceConfig> 
     */
    open class func getServiceConfigWithRequestBuilder(id: String) -> RequestBuilder<ServiceConfig> {
        var path = "/api/application-monitoring/settings/service/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceConfig>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All service configurations
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getServiceConfigs(completion: @escaping ((_ data: [ServiceConfig]?,_ error: Error?) -> Void)) {
        getServiceConfigsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All service configurations
     - GET /api/application-monitoring/settings/service
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[ServiceConfig]> 
     */
    open class func getServiceConfigsWithRequestBuilder() -> RequestBuilder<[ServiceConfig]> {
        let path = "/api/application-monitoring/settings/service"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ServiceConfig]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Order of service configuration
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderServiceConfig(requestBody: [String], completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orderServiceConfigWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Order of service configuration
     - PUT /api/application-monitoring/settings/service/order
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func orderServiceConfigWithRequestBuilder(requestBody: [String]) -> RequestBuilder<Void> {
        let path = "/api/application-monitoring/settings/service/order"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update application configuration
     
     - parameter id: (path)  
     - parameter applicationConfig: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putApplicationConfig(id: String, applicationConfig: ApplicationConfig, completion: @escaping ((_ data: ApplicationConfig?,_ error: Error?) -> Void)) {
        putApplicationConfigWithRequestBuilder(id: id, applicationConfig: applicationConfig).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update application configuration
     - PUT /api/application-monitoring/settings/application/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - parameter applicationConfig: (body)  
     - returns: RequestBuilder<ApplicationConfig> 
     */
    open class func putApplicationConfigWithRequestBuilder(id: String, applicationConfig: ApplicationConfig) -> RequestBuilder<ApplicationConfig> {
        var path = "/api/application-monitoring/settings/application/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applicationConfig)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApplicationConfig>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update service configuration
     
     - parameter id: (path)  
     - parameter serviceConfig: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putServiceConfig(id: String, serviceConfig: ServiceConfig, completion: @escaping ((_ data: ServiceConfig?,_ error: Error?) -> Void)) {
        putServiceConfigWithRequestBuilder(id: id, serviceConfig: serviceConfig).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update service configuration
     - PUT /api/application-monitoring/settings/service/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - parameter serviceConfig: (body)  
     - returns: RequestBuilder<ServiceConfig> 
     */
    open class func putServiceConfigWithRequestBuilder(id: String, serviceConfig: ServiceConfig) -> RequestBuilder<ServiceConfig> {
        var path = "/api/application-monitoring/settings/service/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceConfig)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceConfig>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update endpoint configuration
     
     - parameter id: (path)  
     - parameter httpEndpointConfig: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateEndpointConfig(id: String, httpEndpointConfig: HttpEndpointConfig, completion: @escaping ((_ data: HttpEndpointConfig?,_ error: Error?) -> Void)) {
        updateEndpointConfigWithRequestBuilder(id: id, httpEndpointConfig: httpEndpointConfig).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update endpoint configuration
     - PUT /api/application-monitoring/settings/http-endpoint/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - parameter httpEndpointConfig: (body)  
     - returns: RequestBuilder<HttpEndpointConfig> 
     */
    open class func updateEndpointConfigWithRequestBuilder(id: String, httpEndpointConfig: HttpEndpointConfig) -> RequestBuilder<HttpEndpointConfig> {
        var path = "/api/application-monitoring/settings/http-endpoint/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: httpEndpointConfig)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HttpEndpointConfig>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
