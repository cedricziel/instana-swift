//
// WebsiteCatalogAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class WebsiteCatalogAPI {
    /**
     Metric catalog
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebsiteCatalogMetrics(completion: @escaping ((_ data: [WebsiteMonitoringMetricDescription]?,_ error: Error?) -> Void)) {
        getWebsiteCatalogMetricsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Metric catalog
     - GET /api/website-monitoring/catalog/metrics
     - This endpoint retrieves all available metric definitions for website monitoring. 
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[WebsiteMonitoringMetricDescription]> 
     */
    open class func getWebsiteCatalogMetricsWithRequestBuilder() -> RequestBuilder<[WebsiteMonitoringMetricDescription]> {
        let path = "/api/website-monitoring/catalog/metrics"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WebsiteMonitoringMetricDescription]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Filter tag catalog
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebsiteCatalogTags(completion: @escaping ((_ data: [Tag]?,_ error: Error?) -> Void)) {
        getWebsiteCatalogTagsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Filter tag catalog
     - GET /api/website-monitoring/catalog/tags
     - This endpoint retrieves all available tags for your monitored system.  These tags can be used to group metric results. ``` \"group\": {   \"groupbyTag\": \"beacon.page.name\" } ```  These tags can be used to filter metric results. ``` \"tagFilters\": [{  \"name\": \"beacon.website.name\",  \"operator\": \"EQUALS\",  \"value\": \"example\" }] ``` 
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[Tag]> 
     */
    open class func getWebsiteCatalogTagsWithRequestBuilder() -> RequestBuilder<[Tag]> {
        let path = "/api/website-monitoring/catalog/tags"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Tag]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
