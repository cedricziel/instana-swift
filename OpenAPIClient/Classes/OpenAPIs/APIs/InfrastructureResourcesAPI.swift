//
// InfrastructureResourcesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class InfrastructureResourcesAPI {
    /**
     Get view tree
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInfrastructureViewTree(completion: @escaping ((_ data: TreeNodeResult?,_ error: Error?) -> Void)) {
        getInfrastructureViewTreeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get view tree
     - GET /api/infrastructure-monitoring/graph/views
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<TreeNodeResult> 
     */
    open class func getInfrastructureViewTreeWithRequestBuilder() -> RequestBuilder<TreeNodeResult> {
        let path = "/api/infrastructure-monitoring/graph/views"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TreeNodeResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Monitored host count
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMonitoringState(completion: @escaping ((_ data: MonitoringState?,_ error: Error?) -> Void)) {
        getMonitoringStateWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Monitored host count
     - GET /api/infrastructure-monitoring/monitoring-state
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<MonitoringState> 
     */
    open class func getMonitoringStateWithRequestBuilder() -> RequestBuilder<MonitoringState> {
        let path = "/api/infrastructure-monitoring/monitoring-state"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MonitoringState>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Related hosts
     
     - parameter snapshotId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRelatedHosts(snapshotId: String, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getRelatedHostsWithRequestBuilder(snapshotId: snapshotId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Related hosts
     - GET /api/infrastructure-monitoring/graph/related-hosts/{snapshotId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter snapshotId: (path)  
     - returns: RequestBuilder<[String]> 
     */
    open class func getRelatedHostsWithRequestBuilder(snapshotId: String) -> RequestBuilder<[String]> {
        var path = "/api/infrastructure-monitoring/graph/related-hosts/{snapshotId}"
        let snapshotIdPreEscape = "\(APIHelper.mapValueToPathItem(snapshotId))"
        let snapshotIdPostEscape = snapshotIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{snapshotId}", with: snapshotIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get installed software
     
     - parameter time: (query)  (optional)
     - parameter origin: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter version: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func softwareVersions(time: Int64? = nil, origin: String? = nil, type: String? = nil, name: String? = nil, version: String? = nil, completion: @escaping ((_ data: [SoftwareVersion]?,_ error: Error?) -> Void)) {
        softwareVersionsWithRequestBuilder(time: time, origin: origin, type: type, name: name, version: version).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get installed software
     - GET /api/infrastructure-monitoring/software/versions
     - Retrieve information about the software you are running. This includes runtime and package manager information.  The `name`, `version`, `origin` and `type` parameters are optional filters that can be used to reduce the result data set.
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter time: (query)  (optional)
     - parameter origin: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter version: (query)  (optional)
     - returns: RequestBuilder<[SoftwareVersion]> 
     */
    open class func softwareVersionsWithRequestBuilder(time: Int64? = nil, origin: String? = nil, type: String? = nil, name: String? = nil, version: String? = nil) -> RequestBuilder<[SoftwareVersion]> {
        let path = "/api/infrastructure-monitoring/software/versions"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "time": time?.encodeToJSON(), 
            "origin": origin?.encodeToJSON(), 
            "type": type?.encodeToJSON(), 
            "name": name?.encodeToJSON(), 
            "version": version?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[SoftwareVersion]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
