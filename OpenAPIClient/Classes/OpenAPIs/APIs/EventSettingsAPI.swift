//
// EventSettingsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class EventSettingsAPI {
    /**
     Create Website Alert Config
     
     - parameter websiteAlertConfig: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(websiteAlertConfig: WebsiteAlertConfig, completion: @escaping ((_ data: [WebsiteAlertConfigWithMetadata]?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(websiteAlertConfig: websiteAlertConfig).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Create Website Alert Config
     - POST /api/events/settings/website-alert-configs
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter websiteAlertConfig: (body)  
     - returns: RequestBuilder<[WebsiteAlertConfigWithMetadata]> 
     */
    open class func createWithRequestBuilder(websiteAlertConfig: WebsiteAlertConfig) -> RequestBuilder<[WebsiteAlertConfigWithMetadata]> {
        let path = "/api/events/settings/website-alert-configs"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: websiteAlertConfig)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WebsiteAlertConfigWithMetadata]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete alerting
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAlert(id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAlertWithRequestBuilder(id: id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete alerting
     - DELETE /api/events/settings/alerts/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAlertWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/events/settings/alerts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete alerting channel
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAlertingChannel(id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAlertingChannelWithRequestBuilder(id: id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete alerting channel
     - DELETE /api/events/settings/alertingChannels/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAlertingChannelWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/api/events/settings/alertingChannels/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete built-in event specification
     
     - parameter eventSpecificationId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteBuiltInEventSpecification(eventSpecificationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteBuiltInEventSpecificationWithRequestBuilder(eventSpecificationId: eventSpecificationId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete built-in event specification
     - DELETE /api/events/settings/event-specifications/built-in/{eventSpecificationId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter eventSpecificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteBuiltInEventSpecificationWithRequestBuilder(eventSpecificationId: String) -> RequestBuilder<Void> {
        var path = "/api/events/settings/event-specifications/built-in/{eventSpecificationId}"
        let eventSpecificationIdPreEscape = "\(APIHelper.mapValueToPathItem(eventSpecificationId))"
        let eventSpecificationIdPostEscape = eventSpecificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventSpecificationId}", with: eventSpecificationIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete custom event specification
     
     - parameter eventSpecificationId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCustomEventSpecification(eventSpecificationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteCustomEventSpecificationWithRequestBuilder(eventSpecificationId: eventSpecificationId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete custom event specification
     - DELETE /api/events/settings/event-specifications/custom/{eventSpecificationId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter eventSpecificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteCustomEventSpecificationWithRequestBuilder(eventSpecificationId: String) -> RequestBuilder<Void> {
        var path = "/api/events/settings/event-specifications/custom/{eventSpecificationId}"
        let eventSpecificationIdPreEscape = "\(APIHelper.mapValueToPathItem(eventSpecificationId))"
        let eventSpecificationIdPostEscape = eventSpecificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventSpecificationId}", with: eventSpecificationIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable built-in event specification
     
     - parameter eventSpecificationId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disableBuiltInEventSpecification(eventSpecificationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        disableBuiltInEventSpecificationWithRequestBuilder(eventSpecificationId: eventSpecificationId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Disable built-in event specification
     - POST /api/events/settings/event-specifications/built-in/{eventSpecificationId}/disable
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter eventSpecificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func disableBuiltInEventSpecificationWithRequestBuilder(eventSpecificationId: String) -> RequestBuilder<Void> {
        var path = "/api/events/settings/event-specifications/built-in/{eventSpecificationId}/disable"
        let eventSpecificationIdPreEscape = "\(APIHelper.mapValueToPathItem(eventSpecificationId))"
        let eventSpecificationIdPostEscape = eventSpecificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventSpecificationId}", with: eventSpecificationIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable custom event specification
     
     - parameter eventSpecificationId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disableCustomEventSpecification(eventSpecificationId: String, completion: @escaping ((_ data: CustomEventSpecificationWithLastUpdated?,_ error: Error?) -> Void)) {
        disableCustomEventSpecificationWithRequestBuilder(eventSpecificationId: eventSpecificationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Disable custom event specification
     - POST /api/events/settings/event-specifications/custom/{eventSpecificationId}/disable
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter eventSpecificationId: (path)  
     - returns: RequestBuilder<CustomEventSpecificationWithLastUpdated> 
     */
    open class func disableCustomEventSpecificationWithRequestBuilder(eventSpecificationId: String) -> RequestBuilder<CustomEventSpecificationWithLastUpdated> {
        var path = "/api/events/settings/event-specifications/custom/{eventSpecificationId}/disable"
        let eventSpecificationIdPreEscape = "\(APIHelper.mapValueToPathItem(eventSpecificationId))"
        let eventSpecificationIdPostEscape = eventSpecificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventSpecificationId}", with: eventSpecificationIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomEventSpecificationWithLastUpdated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable built-in event specification
     
     - parameter eventSpecificationId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enableBuiltInEventSpecification(eventSpecificationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        enableBuiltInEventSpecificationWithRequestBuilder(eventSpecificationId: eventSpecificationId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Enable built-in event specification
     - POST /api/events/settings/event-specifications/built-in/{eventSpecificationId}/enable
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter eventSpecificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func enableBuiltInEventSpecificationWithRequestBuilder(eventSpecificationId: String) -> RequestBuilder<Void> {
        var path = "/api/events/settings/event-specifications/built-in/{eventSpecificationId}/enable"
        let eventSpecificationIdPreEscape = "\(APIHelper.mapValueToPathItem(eventSpecificationId))"
        let eventSpecificationIdPostEscape = eventSpecificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventSpecificationId}", with: eventSpecificationIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable custom event specification
     
     - parameter eventSpecificationId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enableCustomEventSpecification(eventSpecificationId: String, completion: @escaping ((_ data: CustomEventSpecificationWithLastUpdated?,_ error: Error?) -> Void)) {
        enableCustomEventSpecificationWithRequestBuilder(eventSpecificationId: eventSpecificationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Enable custom event specification
     - POST /api/events/settings/event-specifications/custom/{eventSpecificationId}/enable
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter eventSpecificationId: (path)  
     - returns: RequestBuilder<CustomEventSpecificationWithLastUpdated> 
     */
    open class func enableCustomEventSpecificationWithRequestBuilder(eventSpecificationId: String) -> RequestBuilder<CustomEventSpecificationWithLastUpdated> {
        var path = "/api/events/settings/event-specifications/custom/{eventSpecificationId}/enable"
        let eventSpecificationIdPreEscape = "\(APIHelper.mapValueToPathItem(eventSpecificationId))"
        let eventSpecificationIdPostEscape = eventSpecificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventSpecificationId}", with: eventSpecificationIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomEventSpecificationWithLastUpdated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Website Alert Config
     
     - parameter id: (path)  
     - parameter validOn: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func find(id: String, validOn: Int64? = nil, completion: @escaping ((_ data: [WebsiteAlertConfigWithMetadata]?,_ error: Error?) -> Void)) {
        findWithRequestBuilder(id: id, validOn: validOn).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Website Alert Config
     - GET /api/events/settings/website-alert-configs/{id}
     - Find a Website Alert Config by ID. This will deliver deleted configs too.
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - parameter validOn: (query)  (optional)
     - returns: RequestBuilder<[WebsiteAlertConfigWithMetadata]> 
     */
    open class func findWithRequestBuilder(id: String, validOn: Int64? = nil) -> RequestBuilder<[WebsiteAlertConfigWithMetadata]> {
        var path = "/api/events/settings/website-alert-configs/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "validOn": validOn?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[WebsiteAlertConfigWithMetadata]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All Website Alert Configs
     
     - parameter websiteId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAllActive(websiteId: String? = nil, completion: @escaping ((_ data: [WebsiteAlertConfigWithMetadata]?,_ error: Error?) -> Void)) {
        findAllActiveWithRequestBuilder(websiteId: websiteId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All Website Alert Configs
     - GET /api/events/settings/website-alert-configs
     - Configs are sorted descending by their created date.
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter websiteId: (query)  (optional)
     - returns: RequestBuilder<[WebsiteAlertConfigWithMetadata]> 
     */
    open class func findAllActiveWithRequestBuilder(websiteId: String? = nil) -> RequestBuilder<[WebsiteAlertConfigWithMetadata]> {
        let path = "/api/events/settings/website-alert-configs"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "websiteId": websiteId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[WebsiteAlertConfigWithMetadata]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get versions of Website Alert Config
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findVersions(id: String, completion: @escaping ((_ data: [ConfigVersion]?,_ error: Error?) -> Void)) {
        findVersionsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get versions of Website Alert Config
     - GET /api/events/settings/website-alert-configs/{id}/versions
     - Find all versions of a Website Alert Config by ID. This will deliver deleted configs too. Configs are sorted descending by their created date.
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<[ConfigVersion]> 
     */
    open class func findVersionsWithRequestBuilder(id: String) -> RequestBuilder<[ConfigVersion]> {
        var path = "/api/events/settings/website-alert-configs/{id}/versions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ConfigVersion]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Alerting
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlert(id: String, completion: @escaping ((_ data: AlertingConfigurationWithLastUpdated?,_ error: Error?) -> Void)) {
        getAlertWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Alerting
     - GET /api/events/settings/alerts/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<AlertingConfigurationWithLastUpdated> 
     */
    open class func getAlertWithRequestBuilder(id: String) -> RequestBuilder<AlertingConfigurationWithLastUpdated> {
        var path = "/api/events/settings/alerts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AlertingConfigurationWithLastUpdated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Alerting channel
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlertingChannel(id: String, completion: @escaping ((_ data: AbstractIntegration?,_ error: Error?) -> Void)) {
        getAlertingChannelWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Alerting channel
     - GET /api/events/settings/alertingChannels/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<AbstractIntegration> 
     */
    open class func getAlertingChannelWithRequestBuilder(id: String) -> RequestBuilder<AbstractIntegration> {
        var path = "/api/events/settings/alertingChannels/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AbstractIntegration>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All alerting channels
     
     - parameter ids: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlertingChannels(ids: [String]? = nil, completion: @escaping ((_ data: [AbstractIntegration]?,_ error: Error?) -> Void)) {
        getAlertingChannelsWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All alerting channels
     - GET /api/events/settings/alertingChannels
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter ids: (query)  (optional)
     - returns: RequestBuilder<[AbstractIntegration]> 
     */
    open class func getAlertingChannelsWithRequestBuilder(ids: [String]? = nil) -> RequestBuilder<[AbstractIntegration]> {
        let path = "/api/events/settings/alertingChannels"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[AbstractIntegration]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All alerting configuration info
     
     - parameter integrationId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlertingConfigurationInfos(integrationId: String? = nil, completion: @escaping ((_ data: [ValidatedAlertingChannelInputInfo]?,_ error: Error?) -> Void)) {
        getAlertingConfigurationInfosWithRequestBuilder(integrationId: integrationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All alerting configuration info
     - GET /api/events/settings/alerts/infos
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter integrationId: (query)  (optional)
     - returns: RequestBuilder<[ValidatedAlertingChannelInputInfo]> 
     */
    open class func getAlertingConfigurationInfosWithRequestBuilder(integrationId: String? = nil) -> RequestBuilder<[ValidatedAlertingChannelInputInfo]> {
        let path = "/api/events/settings/alerts/infos"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "integrationId": integrationId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ValidatedAlertingChannelInputInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All Alerting
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAlerts(completion: @escaping ((_ data: [ValidatedAlertingConfiguration]?,_ error: Error?) -> Void)) {
        getAlertsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All Alerting
     - GET /api/events/settings/alerts
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[ValidatedAlertingConfiguration]> 
     */
    open class func getAlertsWithRequestBuilder() -> RequestBuilder<[ValidatedAlertingConfiguration]> {
        let path = "/api/events/settings/alerts"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ValidatedAlertingConfiguration]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Built-in event specifications
     
     - parameter eventSpecificationId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBuiltInEventSpecification(eventSpecificationId: String, completion: @escaping ((_ data: BuiltInEventSpecification?,_ error: Error?) -> Void)) {
        getBuiltInEventSpecificationWithRequestBuilder(eventSpecificationId: eventSpecificationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Built-in event specifications
     - GET /api/events/settings/event-specifications/built-in/{eventSpecificationId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter eventSpecificationId: (path)  
     - returns: RequestBuilder<BuiltInEventSpecification> 
     */
    open class func getBuiltInEventSpecificationWithRequestBuilder(eventSpecificationId: String) -> RequestBuilder<BuiltInEventSpecification> {
        var path = "/api/events/settings/event-specifications/built-in/{eventSpecificationId}"
        let eventSpecificationIdPreEscape = "\(APIHelper.mapValueToPathItem(eventSpecificationId))"
        let eventSpecificationIdPostEscape = eventSpecificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventSpecificationId}", with: eventSpecificationIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BuiltInEventSpecification>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All built-in event specification
     
     - parameter ids: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBuiltInEventSpecifications(ids: [String]? = nil, completion: @escaping ((_ data: [BuiltInEventSpecificationWithLastUpdated]?,_ error: Error?) -> Void)) {
        getBuiltInEventSpecificationsWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All built-in event specification
     - GET /api/events/settings/event-specifications/built-in
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter ids: (query)  (optional)
     - returns: RequestBuilder<[BuiltInEventSpecificationWithLastUpdated]> 
     */
    open class func getBuiltInEventSpecificationsWithRequestBuilder(ids: [String]? = nil) -> RequestBuilder<[BuiltInEventSpecificationWithLastUpdated]> {
        let path = "/api/events/settings/event-specifications/built-in"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[BuiltInEventSpecificationWithLastUpdated]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Custom event specification
     
     - parameter eventSpecificationId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomEventSpecification(eventSpecificationId: String, completion: @escaping ((_ data: CustomEventSpecificationWithLastUpdated?,_ error: Error?) -> Void)) {
        getCustomEventSpecificationWithRequestBuilder(eventSpecificationId: eventSpecificationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Custom event specification
     - GET /api/events/settings/event-specifications/custom/{eventSpecificationId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter eventSpecificationId: (path)  
     - returns: RequestBuilder<CustomEventSpecificationWithLastUpdated> 
     */
    open class func getCustomEventSpecificationWithRequestBuilder(eventSpecificationId: String) -> RequestBuilder<CustomEventSpecificationWithLastUpdated> {
        var path = "/api/events/settings/event-specifications/custom/{eventSpecificationId}"
        let eventSpecificationIdPreEscape = "\(APIHelper.mapValueToPathItem(eventSpecificationId))"
        let eventSpecificationIdPostEscape = eventSpecificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventSpecificationId}", with: eventSpecificationIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomEventSpecificationWithLastUpdated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All custom event specifications
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomEventSpecifications(completion: @escaping ((_ data: [CustomEventSpecificationWithLastUpdated]?,_ error: Error?) -> Void)) {
        getCustomEventSpecificationsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All custom event specifications
     - GET /api/events/settings/event-specifications/custom
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[CustomEventSpecificationWithLastUpdated]> 
     */
    open class func getCustomEventSpecificationsWithRequestBuilder() -> RequestBuilder<[CustomEventSpecificationWithLastUpdated]> {
        let path = "/api/events/settings/event-specifications/custom"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[CustomEventSpecificationWithLastUpdated]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Summary of all built-in and custom event specifications
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventSpecificationInfos(completion: @escaping ((_ data: [EventSpecificationInfo]?,_ error: Error?) -> Void)) {
        getEventSpecificationInfosWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Summary of all built-in and custom event specifications
     - GET /api/events/settings/event-specifications/infos
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[EventSpecificationInfo]> 
     */
    open class func getEventSpecificationInfosWithRequestBuilder() -> RequestBuilder<[EventSpecificationInfo]> {
        let path = "/api/events/settings/event-specifications/infos"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventSpecificationInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     All built-in and custom event specifications
     
     - parameter requestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventSpecificationInfosByIds(requestBody: [String], completion: @escaping ((_ data: [EventSpecificationInfo]?,_ error: Error?) -> Void)) {
        getEventSpecificationInfosByIdsWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All built-in and custom event specifications
     - POST /api/events/settings/event-specifications/infos
     - Summary of all built-in and custom event specifications by IDs
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<[EventSpecificationInfo]> 
     */
    open class func getEventSpecificationInfosByIdsWithRequestBuilder(requestBody: [String]) -> RequestBuilder<[EventSpecificationInfo]> {
        let path = "/api/events/settings/event-specifications/infos"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventSpecificationInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     All system rules for custom event specifications
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSystemRules(completion: @escaping ((_ data: [SystemRuleLabel]?,_ error: Error?) -> Void)) {
        getSystemRulesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     All system rules for custom event specifications
     - GET /api/events/settings/event-specifications/custom/systemRules
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[SystemRuleLabel]> 
     */
    open class func getSystemRulesWithRequestBuilder() -> RequestBuilder<[SystemRuleLabel]> {
        let path = "/api/events/settings/event-specifications/custom/systemRules"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[SystemRuleLabel]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update alerting
     
     - parameter id: (path)  
     - parameter alertingConfiguration: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAlert(id: String, alertingConfiguration: AlertingConfiguration, completion: @escaping ((_ data: AlertingConfigurationWithLastUpdated?,_ error: Error?) -> Void)) {
        putAlertWithRequestBuilder(id: id, alertingConfiguration: alertingConfiguration).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update alerting
     - PUT /api/events/settings/alerts/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - parameter alertingConfiguration: (body)  
     - returns: RequestBuilder<AlertingConfigurationWithLastUpdated> 
     */
    open class func putAlertWithRequestBuilder(id: String, alertingConfiguration: AlertingConfiguration) -> RequestBuilder<AlertingConfigurationWithLastUpdated> {
        var path = "/api/events/settings/alerts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: alertingConfiguration)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AlertingConfigurationWithLastUpdated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update alerting channel
     
     - parameter id: (path)  
     - parameter abstractIntegration: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAlertingChannel(id: String, abstractIntegration: AbstractIntegration, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putAlertingChannelWithRequestBuilder(id: id, abstractIntegration: abstractIntegration).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Update alerting channel
     - PUT /api/events/settings/alertingChannels/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - parameter abstractIntegration: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func putAlertingChannelWithRequestBuilder(id: String, abstractIntegration: AbstractIntegration) -> RequestBuilder<Void> {
        var path = "/api/events/settings/alertingChannels/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: abstractIntegration)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update custom event specification
     
     - parameter eventSpecificationId: (path)  
     - parameter customEventSpecification: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCustomEventSpecification(eventSpecificationId: String, customEventSpecification: CustomEventSpecification, completion: @escaping ((_ data: CustomEventSpecificationWithLastUpdated?,_ error: Error?) -> Void)) {
        putCustomEventSpecificationWithRequestBuilder(eventSpecificationId: eventSpecificationId, customEventSpecification: customEventSpecification).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update custom event specification
     - PUT /api/events/settings/event-specifications/custom/{eventSpecificationId}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter eventSpecificationId: (path)  
     - parameter customEventSpecification: (body)  
     - returns: RequestBuilder<CustomEventSpecificationWithLastUpdated> 
     */
    open class func putCustomEventSpecificationWithRequestBuilder(eventSpecificationId: String, customEventSpecification: CustomEventSpecification) -> RequestBuilder<CustomEventSpecificationWithLastUpdated> {
        var path = "/api/events/settings/event-specifications/custom/{eventSpecificationId}"
        let eventSpecificationIdPreEscape = "\(APIHelper.mapValueToPathItem(eventSpecificationId))"
        let eventSpecificationIdPostEscape = eventSpecificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventSpecificationId}", with: eventSpecificationIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customEventSpecification)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomEventSpecificationWithLastUpdated>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Test alerting channel
     
     - parameter abstractIntegration: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendTestAlerting(abstractIntegration: AbstractIntegration, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sendTestAlertingWithRequestBuilder(abstractIntegration: abstractIntegration).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Test alerting channel
     - PUT /api/events/settings/alertingChannels/test
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter abstractIntegration: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func sendTestAlertingWithRequestBuilder(abstractIntegration: AbstractIntegration) -> RequestBuilder<Void> {
        let path = "/api/events/settings/alertingChannels/test"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: abstractIntegration)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update Website Alert Config
     
     - parameter id: (path)  
     - parameter websiteAlertConfig: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(id: String, websiteAlertConfig: WebsiteAlertConfig, completion: @escaping ((_ data: [WebsiteAlertConfigWithMetadata]?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(id: id, websiteAlertConfig: websiteAlertConfig).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Update Website Alert Config
     - POST /api/events/settings/website-alert-configs/{id}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter id: (path)  
     - parameter websiteAlertConfig: (body)  
     - returns: RequestBuilder<[WebsiteAlertConfigWithMetadata]> 
     */
    open class func updateWithRequestBuilder(id: String, websiteAlertConfig: WebsiteAlertConfig) -> RequestBuilder<[WebsiteAlertConfigWithMetadata]> {
        var path = "/api/events/settings/website-alert-configs/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: websiteAlertConfig)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WebsiteAlertConfigWithMetadata]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
