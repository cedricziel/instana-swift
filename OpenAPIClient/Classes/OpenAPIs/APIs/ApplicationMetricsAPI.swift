//
// ApplicationMetricsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ApplicationMetricsAPI {
    /**
     Get Application Metrics
     
     - parameter getApplications: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApplicationMetrics(getApplications: GetApplications? = nil, completion: @escaping ((_ data: ApplicationMetricResult?,_ error: Error?) -> Void)) {
        getApplicationMetricsWithRequestBuilder(getApplications: getApplications).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Application Metrics
     - POST /api/application-monitoring/metrics/applications
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter getApplications: (body)  (optional)
     - returns: RequestBuilder<ApplicationMetricResult> 
     */
    open class func getApplicationMetricsWithRequestBuilder(getApplications: GetApplications? = nil) -> RequestBuilder<ApplicationMetricResult> {
        let path = "/api/application-monitoring/metrics/applications"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getApplications)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApplicationMetricResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get Endpoint metrics
     
     - parameter getEndpoints: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEndpointsMetrics(getEndpoints: GetEndpoints? = nil, completion: @escaping ((_ data: EndpointMetricResult?,_ error: Error?) -> Void)) {
        getEndpointsMetricsWithRequestBuilder(getEndpoints: getEndpoints).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Endpoint metrics
     - POST /api/application-monitoring/metrics/endpoints
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter getEndpoints: (body)  (optional)
     - returns: RequestBuilder<EndpointMetricResult> 
     */
    open class func getEndpointsMetricsWithRequestBuilder(getEndpoints: GetEndpoints? = nil) -> RequestBuilder<EndpointMetricResult> {
        let path = "/api/application-monitoring/metrics/endpoints"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getEndpoints)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EndpointMetricResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get Service metrics
     
     - parameter getServices: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getServicesMetrics(getServices: GetServices? = nil, completion: @escaping ((_ data: ServiceMetricResult?,_ error: Error?) -> Void)) {
        getServicesMetricsWithRequestBuilder(getServices: getServices).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Service metrics
     - POST /api/application-monitoring/metrics/services
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter getServices: (body)  (optional)
     - returns: RequestBuilder<ServiceMetricResult> 
     */
    open class func getServicesMetricsWithRequestBuilder(getServices: GetServices? = nil) -> RequestBuilder<ServiceMetricResult> {
        let path = "/api/application-monitoring/metrics/services"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getServices)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceMetricResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
