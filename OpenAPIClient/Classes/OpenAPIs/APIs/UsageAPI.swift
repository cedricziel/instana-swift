//
// UsageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class UsageAPI {
    /**
     API usage by customer
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllUsage(completion: @escaping ((_ data: [UsageResult]?,_ error: Error?) -> Void)) {
        getAllUsageWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     API usage by customer
     - GET /api/instana/usage/api
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<[UsageResult]> 
     */
    open class func getAllUsageWithRequestBuilder() -> RequestBuilder<[UsageResult]> {
        let path = "/api/instana/usage/api"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[UsageResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Host count day / month / year
     
     - parameter day: (path)  
     - parameter month: (path)  
     - parameter year: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHostsPerDay(day: Int, month: Int, year: Int, completion: @escaping ((_ data: [UsageResult]?,_ error: Error?) -> Void)) {
        getHostsPerDayWithRequestBuilder(day: day, month: month, year: year).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Host count day / month / year
     - GET /api/instana/usage/hosts/{day}/{month}/{year}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter day: (path)  
     - parameter month: (path)  
     - parameter year: (path)  
     - returns: RequestBuilder<[UsageResult]> 
     */
    open class func getHostsPerDayWithRequestBuilder(day: Int, month: Int, year: Int) -> RequestBuilder<[UsageResult]> {
        var path = "/api/instana/usage/hosts/{day}/{month}/{year}"
        let dayPreEscape = "\(APIHelper.mapValueToPathItem(day))"
        let dayPostEscape = dayPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{day}", with: dayPostEscape, options: .literal, range: nil)
        let monthPreEscape = "\(APIHelper.mapValueToPathItem(month))"
        let monthPostEscape = monthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{month}", with: monthPostEscape, options: .literal, range: nil)
        let yearPreEscape = "\(APIHelper.mapValueToPathItem(year))"
        let yearPostEscape = yearPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{year}", with: yearPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[UsageResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Host count month / year
     
     - parameter month: (path)  
     - parameter year: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHostsPerMonth(month: Int, year: Int, completion: @escaping ((_ data: [UsageResult]?,_ error: Error?) -> Void)) {
        getHostsPerMonthWithRequestBuilder(month: month, year: year).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Host count month / year
     - GET /api/instana/usage/hosts/{month}/{year}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter month: (path)  
     - parameter year: (path)  
     - returns: RequestBuilder<[UsageResult]> 
     */
    open class func getHostsPerMonthWithRequestBuilder(month: Int, year: Int) -> RequestBuilder<[UsageResult]> {
        var path = "/api/instana/usage/hosts/{month}/{year}"
        let monthPreEscape = "\(APIHelper.mapValueToPathItem(month))"
        let monthPostEscape = monthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{month}", with: monthPostEscape, options: .literal, range: nil)
        let yearPreEscape = "\(APIHelper.mapValueToPathItem(year))"
        let yearPostEscape = yearPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{year}", with: yearPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[UsageResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     API usage day / month / year
     
     - parameter day: (path)  
     - parameter month: (path)  
     - parameter year: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsagePerDay(day: Int, month: Int, year: Int, completion: @escaping ((_ data: [UsageResult]?,_ error: Error?) -> Void)) {
        getUsagePerDayWithRequestBuilder(day: day, month: month, year: year).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     API usage day / month / year
     - GET /api/instana/usage/api/{day}/{month}/{year}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter day: (path)  
     - parameter month: (path)  
     - parameter year: (path)  
     - returns: RequestBuilder<[UsageResult]> 
     */
    open class func getUsagePerDayWithRequestBuilder(day: Int, month: Int, year: Int) -> RequestBuilder<[UsageResult]> {
        var path = "/api/instana/usage/api/{day}/{month}/{year}"
        let dayPreEscape = "\(APIHelper.mapValueToPathItem(day))"
        let dayPostEscape = dayPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{day}", with: dayPostEscape, options: .literal, range: nil)
        let monthPreEscape = "\(APIHelper.mapValueToPathItem(month))"
        let monthPostEscape = monthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{month}", with: monthPostEscape, options: .literal, range: nil)
        let yearPreEscape = "\(APIHelper.mapValueToPathItem(year))"
        let yearPostEscape = yearPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{year}", with: yearPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[UsageResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     API usage month / year
     
     - parameter month: (path)  
     - parameter year: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsagePerMonth(month: Int, year: Int, completion: @escaping ((_ data: [UsageResult]?,_ error: Error?) -> Void)) {
        getUsagePerMonthWithRequestBuilder(month: month, year: year).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     API usage month / year
     - GET /api/instana/usage/api/{month}/{year}
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter month: (path)  
     - parameter year: (path)  
     - returns: RequestBuilder<[UsageResult]> 
     */
    open class func getUsagePerMonthWithRequestBuilder(month: Int, year: Int) -> RequestBuilder<[UsageResult]> {
        var path = "/api/instana/usage/api/{month}/{year}"
        let monthPreEscape = "\(APIHelper.mapValueToPathItem(month))"
        let monthPostEscape = monthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{month}", with: monthPostEscape, options: .literal, range: nil)
        let yearPreEscape = "\(APIHelper.mapValueToPathItem(year))"
        let yearPostEscape = yearPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{year}", with: yearPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[UsageResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
