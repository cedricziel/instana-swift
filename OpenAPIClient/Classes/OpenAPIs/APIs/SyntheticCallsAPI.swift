//
// SyntheticCallsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class SyntheticCallsAPI {
    /**
     Delete synthetic call configurations
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSyntheticCall(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSyntheticCallWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete synthetic call configurations
     - DELETE /api/settings/synthetic-calls
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<Void> 
     */
    open class func deleteSyntheticCallWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/settings/synthetic-calls"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Synthetic call configurations
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSyntheticCalls(completion: @escaping ((_ data: SyntheticCallWithDefaultsConfig?,_ error: Error?) -> Void)) {
        getSyntheticCallsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Synthetic call configurations
     - GET /api/settings/synthetic-calls
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - returns: RequestBuilder<SyntheticCallWithDefaultsConfig> 
     */
    open class func getSyntheticCallsWithRequestBuilder() -> RequestBuilder<SyntheticCallWithDefaultsConfig> {
        let path = "/api/settings/synthetic-calls"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SyntheticCallWithDefaultsConfig>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update synthetic call configurations
     
     - parameter syntheticCallConfig: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSyntheticCall(syntheticCallConfig: SyntheticCallConfig, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateSyntheticCallWithRequestBuilder(syntheticCallConfig: syntheticCallConfig).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Update synthetic call configurations
     - PUT /api/settings/synthetic-calls
     - API Key:
       - type: apiKey authorization 
       - name: ApiKeyAuth
     - parameter syntheticCallConfig: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateSyntheticCallWithRequestBuilder(syntheticCallConfig: SyntheticCallConfig) -> RequestBuilder<Void> {
        let path = "/api/settings/synthetic-calls"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: syntheticCallConfig)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
